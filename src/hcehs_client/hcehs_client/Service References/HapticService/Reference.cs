//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace hcehs_client.HapticService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HapticService.IHapticService")]
    public interface IHapticService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHapticService/GetMessage", ReplyAction="http://tempuri.org/IHapticService/GetMessageResponse")]
        string GetMessage(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHapticService/GetMessage", ReplyAction="http://tempuri.org/IHapticService/GetMessageResponse")]
        System.Threading.Tasks.Task<string> GetMessageAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHapticService/GetCoordinate", ReplyAction="http://tempuri.org/IHapticService/GetCoordinateResponse")]
        string GetCoordinate(string workstationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHapticService/GetCoordinate", ReplyAction="http://tempuri.org/IHapticService/GetCoordinateResponse")]
        System.Threading.Tasks.Task<string> GetCoordinateAsync(string workstationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHapticService/LoadConfigurations", ReplyAction="http://tempuri.org/IHapticService/LoadConfigurationsResponse")]
        void LoadConfigurations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHapticService/LoadConfigurations", ReplyAction="http://tempuri.org/IHapticService/LoadConfigurationsResponse")]
        System.Threading.Tasks.Task LoadConfigurationsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHapticServiceChannel : hcehs_client.HapticService.IHapticService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HapticServiceClient : System.ServiceModel.ClientBase<hcehs_client.HapticService.IHapticService>, hcehs_client.HapticService.IHapticService {
        
        public HapticServiceClient() {
        }
        
        public HapticServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HapticServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HapticServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HapticServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetMessage(string name) {
            return base.Channel.GetMessage(name);
        }
        
        public System.Threading.Tasks.Task<string> GetMessageAsync(string name) {
            return base.Channel.GetMessageAsync(name);
        }
        
        public string GetCoordinate(string workstationName) {
            return base.Channel.GetCoordinate(workstationName);
        }
        
        public System.Threading.Tasks.Task<string> GetCoordinateAsync(string workstationName) {
            return base.Channel.GetCoordinateAsync(workstationName);
        }
        
        public void LoadConfigurations() {
            base.Channel.LoadConfigurations();
        }
        
        public System.Threading.Tasks.Task LoadConfigurationsAsync() {
            return base.Channel.LoadConfigurationsAsync();
        }
    }
}
